"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (source) {
  const { schema, parse } = getSchemaAndParser(source);
  return function (obj, key = "__UNKNOWN__", parents = [], parentKeys = []) {
    return function (_context = {}) {
      const context = schema.params && schema.params.reuseContext ? _context : {};
      const result = parse(schema)(obj, key, parents, parentKeys)(context);
      const build = schema.params && schema.params.build;
      return build ? function () {
        const output = build(obj, key, parents, parentKeys)(context)(result);
        return output instanceof _results.Result ? output : new _results.Match(output, { obj, key, parents, parentKeys });
      }() : result;
    };
  };
};

var _exception = require("./exception");

var _exception2 = _interopRequireDefault(_exception);

var _results = require("./results");

var _array = require("./parsers/array");

var _array2 = _interopRequireDefault(_array);

var _function = require("./parsers/function");

var _function2 = _interopRequireDefault(_function);

var _primitive = require("./parsers/primitive");

var _primitive2 = _interopRequireDefault(_primitive);

var _object = require("./parsers/object");

var _object2 = _interopRequireDefault(_object);

var _schemas = require("./schemas");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getSchemaAndParser(source) {
  function normalize(src, SchemaClass, params = {}) {
    return src instanceof SchemaClass ? src : new SchemaClass(src, params);
  }

  return source instanceof _schemas.PrimitiveSchema || ["string", "number", "boolean", "symbol"].includes(typeof source) ? { schema: normalize(source, _schemas.PrimitiveSchema), parse: _primitive2.default } : source instanceof _schemas.FunctionSchema || source instanceof Function ? { schema: normalize(source, _schemas.FunctionSchema), parse: _function2.default } : source instanceof _schemas.ArraySchema || source instanceof Array ? { schema: normalize(source, _schemas.ArraySchema), parse: _array2.default } : source instanceof _schemas.ObjectSchema || source.constructor === Object ? { schema: normalize(source, _schemas.ObjectSchema), parse: _object2.default } : (0, _exception2.default)(`Invalid schema type ${typeof source}.`);
}

/*
  EntryEvalFunction vs EvalFunction:
    EntryEvalFunction allows key, parents, parentKeys to be empty.
*/
//# sourceMappingURL=parse.js.map