{"version":3,"sources":["../src/types.js"],"names":[],"mappings":";;AACA;;AACA","file":"types.js","sourcesContent":["/* @flow */\nimport { Result, Match, Empty, Skip, Fault } from \"./results\";\nimport { Schema } from \"./schemas\";\n\nimport type { SchemaParams } from \"./schemas/schema\";\n\nexport type SchemaType<TResult, TFinalResult, TParams: SchemaParams<TResult, TFinalResult>> =\n  | string\n  | number\n  | boolean\n  | Symbol\n  | Function\n  | Object\n  | Array<any>\n  | Schema<TResult, TFinalResult, TParams>;\n\nexport type Primitive = string | number | boolean | Symbol | Function;\n\nexport type ResultType<TResultItem> = Match<TResultItem> | Empty | Skip | Fault;\n\nexport type Predicate<T> = (obj: T) => boolean;\n\nexport type EvalFunction<TObject, TResult: Result> = (\n  obj: TObject,\n  key: string,\n  parents: Array<any>,\n  parentKeys: Array<string>\n) => (context?: Object) => TResult;\n"]}