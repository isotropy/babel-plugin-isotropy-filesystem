{"version":3,"sources":["../../src/parsers/object.js"],"names":["schema","_obj","key","parents","parentKeys","obj","params","modifiers","object","contextOrFail","of","Object","keys","value","sort","a","b","sortFn","reduce","context","childKey","childSource","childUnmodified","unmodified","property","effectiveContainerObj","propModifier","childItem","isChildLiteralObject","constructor","childSchema","result","concat","replace","acc","item","schema1","schema2","schema1Order","order","schema2Order"],"mappings":"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","file":"object.js","sourcesContent":["/*       */\nimport { Seq } from \"lazily\";\nimport { Result, Match, Empty, Skip, Fault } from \"../results\";\nimport parse from \"../parse\";\nimport { ObjectSchema } from \"../schemas\";\nimport { wrapSchemaIfLiteralChild } from \"./literals\";\n\nfunction sortFn(schema1, schema2) {\n  const schema1Order = schema1.params && schema1.params.order ? schema1.params.order : 0;\n  const schema2Order = schema2.params && schema2.params.order ? schema2.params.order : 0;\n  return schema1Order - schema2Order;\n}\n\nexport default function(schema) {\n  return (_obj, key, parents, parentKeys) => context => {\n    const obj = schema.params && schema.params.modifiers && schema.params.modifiers.object\n      ? schema.params.modifiers.object(_obj)\n      : _obj;\n\n    return typeof obj !== \"undefined\"\n      ? (() => {\n          const contextOrFail = Seq.of(Object.keys(schema.value))\n            .sort((a, b) => sortFn(schema.value[a], schema.value[b]))\n            .reduce(\n              (context, childKey) => {\n                const childSource = schema.value[childKey];\n\n                const childUnmodified = (childSource.params &&\n                  childSource.params.unmodified) || {\n                  object: false,\n                  property: false\n                };\n\n                const effectiveContainerObj = childUnmodified.object ? _obj : obj;\n                const propModifier =\n                  schema.params && schema.params.modifiers && schema.params.modifiers.property;\n\n                const childItem = !childUnmodified.property && propModifier\n                  ? propModifier(effectiveContainerObj, childKey)\n                  : effectiveContainerObj[childKey];\n\n                // child is { ... }\n                const isChildLiteralObject =\n                  typeof childSource === \"object\" && childSource.constructor === Object;\n\n                const childSchema = wrapSchemaIfLiteralChild(schema, childSource);\n\n                const result = parse(childSchema)(\n                  childItem,\n                  childKey,\n                  parents.concat(obj),\n                  parentKeys.concat(key)\n                )(context);\n\n                return result instanceof Match\n                  ? (childSchema.params && childSchema.params.replace) || isChildLiteralObject\n                      ? {\n                          ...context,\n                          ...result.value\n                        }\n                      : {\n                          ...context,\n                          [(childSchema.params && childSchema.params.key) ||\n                            childKey]: result.value\n                        }\n                  : result instanceof Empty ? context : result;\n              },\n              context,\n              (acc, item) => acc instanceof Skip || acc instanceof Fault\n            );\n\n          return contextOrFail instanceof Skip || contextOrFail instanceof Fault\n            ? contextOrFail\n            : typeof contextOrFail !== \"undefined\" && contextOrFail !== context\n                ? new Match(contextOrFail, { obj, key, parents, parentKeys })\n                : new Empty({ obj, key, parents, parentKeys });\n        })()\n      : new Skip(`Cannot parse undefined.`, { obj, key, parents, parentKeys });\n  };\n}\n"]}