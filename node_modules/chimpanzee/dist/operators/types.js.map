{"version":3,"sources":["../../src/operators/types.js"],"names":["number","bool","string","object","func","params","checkType","type","meta","fn","obj","key","parents","parentKeys","result","context"],"mappings":";;;;;QAOgBA,M,GAAAA,M;QAIAC,I,GAAAA,I;QAIAC,M,GAAAA,M;QAIAC,M,GAAAA,M;QAIAC,I,GAAAA,I;;AAtBhB;;AACA;;AACA;;AACA;;;;AACA;;;;AAEO,SAASJ,MAAT,CAAgBK,MAAhB,EAAwB;AAC7B,SAAOC,UAAU,QAAV,EAAoBD,MAApB,CAAP;AACD,C,CATD;AAWO,SAASJ,IAAT,CAAcI,MAAd,EAAsB;AAC3B,SAAOC,UAAU,SAAV,EAAqBD,MAArB,CAAP;AACD;;AAEM,SAASH,MAAT,CAAgBG,MAAhB,EAAwB;AAC7B,SAAOC,UAAU,QAAV,EAAoBD,MAApB,CAAP;AACD;;AAEM,SAASF,MAAT,CAAgBE,MAAhB,EAAwB;AAC7B,SAAOC,UAAU,QAAV,EAAoBD,MAApB,CAAP;AACD;;AAEM,SAASD,IAAT,CAAcC,MAAd,EAAsB;AAC3B,SAAOC,UAAU,UAAV,EAAsBD,MAAtB,CAAP;AACD;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAyBF,SAAS,EAAlC,EAAsC;AACpC,QAAMG,OAAO,EAAED,IAAF,EAAQF,MAAR,EAAb;;AAEA,WAASI,EAAT,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2C;AACzC,WAAO,mBAAW;AAChB,YAAMC,SAAS,qBAAM,wBAAU;AAAA,eAAO,OAAOJ,GAAP,KAAeH,IAAtB;AAAA,OAAV,CAAN,EACbG,GADa,EAEbC,GAFa,EAGbC,OAHa,EAIbC,UAJa,EAKbE,OALa,CAAf;AAMA,aAAOD,kCACH,kBACG,YAAWP,IAAK,YAAW,OAAOG,GAAI,GADzC,EAEE,EAAEA,GAAF,EAAOC,GAAP,EAAYC,OAAZ,EAAqBC,UAArB,EAFF,EAGEL,IAHF,CADG,GAMHM,MANJ;AAOD,KAdD;AAeD;;AAED,SAAO,4BAAmBL,EAAnB,EAAuB,sBAAUJ,MAAV,CAAvB,EAA0CG,IAA1C,CAAP;AACD","file":"types.js","sourcesContent":["/*       */\nimport { captureIf } from \"./capture\";\nimport { Match, Empty, Skip, Fault } from \"../results\";\nimport { FunctionSchema } from \"../schemas\";\nimport parse from \"../parse\";\nimport { getParams } from \"./utils\";\n\nexport function number(params) {\n  return checkType(\"number\", params);\n}\n\nexport function bool(params) {\n  return checkType(\"boolean\", params);\n}\n\nexport function string(params) {\n  return checkType(\"string\", params);\n}\n\nexport function object(params) {\n  return checkType(\"object\", params);\n}\n\nexport function func(params) {\n  return checkType(\"function\", params);\n}\n\nfunction checkType(type, params = {}) {\n  const meta = { type, params };\n\n  function fn(obj, key, parents, parentKeys) {\n    return context => {\n      const result = parse(captureIf(obj => typeof obj === type))(\n        obj,\n        key,\n        parents,\n        parentKeys\n      )(context);\n      return result instanceof Skip\n        ? new Skip(\n            `Expected ${type} but got ${typeof obj}.`,\n            { obj, key, parents, parentKeys },\n            meta\n          )\n        : result;\n    };\n  }\n\n  return new FunctionSchema(fn, getParams(params), meta);\n}\n"]}