{"version":3,"sources":["../../src/operators/any.js"],"names":["any","schemas","params","meta","type","fn","obj","key","parents","parentKeys","run","skippedSchemas","skippedResults","result","context","length","slice","concat"],"mappings":";;;;;QAOgBA,G,GAAAA,G;;AANhB;;AACA;;AACA;;AACA;;;;AACA;;;;AAEO,SAASA,GAAT,CAAaC,OAAb,EAAsBC,MAAtB,EAA8B;AACnC,QAAMC,OAAO,EAAEC,MAAM,KAAR,EAAeH,OAAf,EAAwBC,MAAxB,EAAb;;AAEA,WAASG,EAAT,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2C;AACzC,WAAO;AAAA,aACJ,SAASC,GAAT,CAAaT,OAAb,EAAsBU,cAAtB,EAAsCC,cAAtC,EAAsD;AACrD,cAAMC,SAAS,qBAAMZ,QAAQ,CAAR,CAAN,EAAkBK,GAAlB,EAAuBC,GAAvB,EAA4BC,OAA5B,EAAqCC,UAArC,EAAiDK,OAAjD,CAAf;AACA,eAAOD,oCAA2BA,gCAA3B,IAAsDA,gCAAtD,GACHA,MADG,GAEHZ,QAAQc,MAAR,GAAiB,CAAjB,GACEL,IACET,QAAQe,KAAR,CAAc,CAAd,CADF,EAEEL,eAAeM,MAAf,CAAsBhB,QAAQ,CAAR,CAAtB,CAFF,EAGEW,eAAeK,MAAf,CAAsBJ,MAAtB,CAHF,CADF,GAME,kBACE,4BADF,EAEE;AACEP,aADF;AAEEC,aAFF;AAGEC,iBAHF;AAIEC,oBAJF;AAKEE,0BAAgBA,eAAeM,MAAf,CAAsBhB,QAAQ,CAAR,CAAtB,CALlB;AAMEW,0BAAgBA,eAAeK,MAAf,CAAsBJ,MAAtB;AANlB,SAFF,EAUEV,IAVF,CARN;AAoBD,OAtBD,CAsBGF,OAtBH,EAsBY,EAtBZ,EAsBgB,EAtBhB,CADK;AAAA,KAAP;AAwBD;;AAED,SAAO,4BAAmBI,EAAnB,EAAuB,sBAAUH,MAAV,CAAvB,EAA0CC,IAA1C,CAAP;AACD,C,CAtCD","file":"any.js","sourcesContent":["/*       */\nimport { Match, Empty, Skip, Fault } from \"../results\";\nimport { FunctionSchema } from \"../schemas\";\nimport { Seq } from \"lazily\";\nimport parse from \"../parse\";\nimport { getParams } from \"./utils\";\n\nexport function any(schemas, params) {\n  const meta = { type: \"any\", schemas, params };\n\n  function fn(obj, key, parents, parentKeys) {\n    return context =>\n      (function run(schemas, skippedSchemas, skippedResults) {\n        const result = parse(schemas[0])(obj, key, parents, parentKeys)(context);\n        return result instanceof Match || result instanceof Empty || result instanceof Fault\n          ? result\n          : schemas.length > 1\n            ? run(\n                schemas.slice(1),\n                skippedSchemas.concat(schemas[0]),\n                skippedResults.concat(result)\n              )\n            : new Skip(\n                \"None of the items matched.\",\n                {\n                  obj,\n                  key,\n                  parents,\n                  parentKeys,\n                  skippedSchemas: skippedSchemas.concat(schemas[0]),\n                  skippedResults: skippedResults.concat(result)\n                },\n                meta\n              );\n      })(schemas, [], []);\n  }\n\n  return new FunctionSchema(fn, getParams(params), meta);\n}\n"]}