{"version":3,"sources":["../../src/operators/deep.js"],"names":["deep","schema","params","meta","type","fn","obj","key","parents","parentKeys","traverseObject","keys","length","result","concat","context","slice","traverseArray","items","Object","Array","isArray"],"mappings":";;;;;QAOgBA,I,GAAAA,I;;AANhB;;AACA;;AACA;;AACA;;;;AACA;;;;AAEO,SAASA,IAAT,CAAcC,MAAd,EAAsBC,SAAS,EAA/B,EAAmC;AACxC,QAAMC,OAAO,EAAEC,MAAM,MAAR,EAAgBH,MAAhB,EAAwBC,MAAxB,EAAb;;AAEA,WAASG,EAAT,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2C;AACzC,WAAO,mBAAW;AAChB,eAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,eAAOA,KAAKC,MAAL,GACF,YAAM;AACL,gBAAMC,SAAS,qBAAMb,KAAKC,MAAL,CAAN,EACbK,IAAIK,KAAK,CAAL,CAAJ,CADa,EAEbJ,GAFa,EAGbC,QAAQM,MAAR,CAAeR,GAAf,CAHa,EAIbG,WAAWK,MAAX,CAAkBH,KAAK,CAAL,CAAlB,CAJa,EAKbI,OALa,CAAf;AAMA,iBAAO,EAAEF,+BAAF,IAA4BA,MAA5B,GAAqCH,eAAeC,KAAKK,KAAL,CAAW,CAAX,CAAf,CAA5C;AACD,SARD,EADG,GAUH,kBAAS,oBAAT,EAA+B,EAAEV,GAAF,EAAOC,GAAP,EAAYC,OAAZ,EAAqBC,UAArB,EAA/B,EAAkEN,IAAlE,CAVJ;AAWD;;AAED,eAASc,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,eAAOA,MAAMN,MAAN,GACF,YAAM;AACL,gBAAMC,SAAS,qBAAMb,KAAKC,MAAL,EAAaC,MAAb,CAAN,EAA4BgB,MAAM,CAAN,CAA5B,EAAsCX,GAAtC,EAA2CC,OAA3C,EAAoDC,UAApD,EACbM,OADa,CAAf;AAGA,iBAAO,EAAEF,+BAAF,IAA4BA,MAA5B,GAAqCI,cAAcC,MAAMF,KAAN,CAAY,CAAZ,CAAd,CAA5C;AACD,SALD,EADG,GAOH,kBAAS,oBAAT,EAA+B,EAAEV,GAAF,EAAOC,GAAP,EAAYC,OAAZ,EAAqBC,UAArB,EAA/B,EAAkEN,IAAlE,CAPJ;AAQD;;AAED,YAAMU,SAAS,qBAAMZ,MAAN,EAAcK,GAAd,EAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,UAAjC,EAA6CM,OAA7C,CAAf;;AAEA,aAAO,EAAEF,+BAAF,IACHA,MADG,GAEH,OAAOP,GAAP,KAAe,QAAf,GACII,eAAeS,OAAOR,IAAP,CAAYL,GAAZ,CAAf,CADJ,GAEIc,MAAMC,OAAN,CAAcf,GAAd,IACIW,cAAcX,GAAd,CADJ,GAEI,kBAAS,oBAAT,EAA+B,EAAEA,GAAF,EAAOC,GAAP,EAAYC,OAAZ,EAAqBC,UAArB,EAA/B,EAAkEN,IAAlE,CANZ;AAOD,KAnCD;AAoCD;;AAED,SAAO,4BAAmBE,EAAnB,EAAuB,sBAAUH,MAAV,CAAvB,EAA0CC,IAA1C,CAAP;AACD,C,CAlDD","file":"deep.js","sourcesContent":["/*       */\nimport { Seq } from \"lazily\";\nimport { Match, Empty, Skip, Fault } from \"../results\";\nimport { FunctionSchema } from \"../schemas\";\nimport parse from \"../parse\";\nimport { getParams } from \"./utils\";\n\nexport function deep(schema, params = {}) {\n  const meta = { type: \"deep\", schema, params };\n\n  function fn(obj, key, parents, parentKeys) {\n    return context => {\n      function traverseObject(keys) {\n        return keys.length\n          ? (() => {\n              const result = parse(deep(schema))(\n                obj[keys[0]],\n                key,\n                parents.concat(obj),\n                parentKeys.concat(keys[0])\n              )(context);\n              return !(result instanceof Skip) ? result : traverseObject(keys.slice(1));\n            })()\n          : new Skip(\"Not found in deep.\", { obj, key, parents, parentKeys }, meta);\n      }\n\n      function traverseArray(items) {\n        return items.length\n          ? (() => {\n              const result = parse(deep(schema, params))(items[0], key, parents, parentKeys)(\n                context\n              );\n              return !(result instanceof Skip) ? result : traverseArray(items.slice(1));\n            })()\n          : new Skip(\"Not found in deep.\", { obj, key, parents, parentKeys }, meta);\n      }\n\n      const result = parse(schema)(obj, key, parents, parentKeys)(context);\n\n      return !(result instanceof Skip)\n        ? result\n        : typeof obj === \"object\"\n            ? traverseObject(Object.keys(obj))\n            : Array.isArray(obj)\n                ? traverseArray(obj)\n                : new Skip(\"Not found in deep.\", { obj, key, parents, parentKeys }, meta);\n    };\n  }\n\n  return new FunctionSchema(fn, getParams(params), meta);\n}\n"]}