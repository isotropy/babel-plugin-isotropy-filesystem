"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*       */


exports.composite = composite;

var _results = require("../results");

var _lazily = require("lazily");

var _schemas = require("../schemas");

var _parse = require("../parse");

var _parse2 = _interopRequireDefault(_parse);

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getSchema(schema, paramSelector) {
  const schemaSelector = schema.params && schema.params.selector ? schema.params.selector : "default";

  return Array.isArray(schema) ? schema.map(function (item) {
    return getSchema(item, paramSelector);
  }).filter(function (x) {
    return x !== undefined;
  }) : schema instanceof _schemas.Schema ? schemaSelector === paramSelector ? schema : undefined : typeof schema === "object" ? _lazily.Seq.of(Object.keys(schema)).reduce(function (acc, key) {
    const result = getSchema(schema[key], paramSelector);
    return result !== undefined && Object.keys(result).length > 0 ? _extends({}, acc, { [key]: result }) : acc;
  }, {}) : paramSelector === "default" ? schema : undefined;
}

function composite(schema, _paramsList, ownParams = {}) {
  const meta = {
    type: "composite",
    schema,
    paramsList: _paramsList,
    ownParams
  };

  const paramsList = _paramsList.some(function (params) {
    return !params.name || params.name === "default";
  }) ? _paramsList : [{ name: "default" }].concat(_paramsList);

  const schemas = paramsList.map(function (params) {
    return new _schemas.ObjectSchema(getSchema(schema, params && params.name || "default"), params);
  });

  function fn(obj, key, parents, parentKeys) {
    return function (context) {
      const env = { obj, key, parents, parentKeys };

      function merge(state, result) {
        return _extends({}, state, result.value);
      }

      return schemas.length ? function run([schema, ...rest], state) {
        const result = (0, _parse2.default)(schema)(obj, key, parents, parentKeys)(context);
        return result instanceof _results.Match || result instanceof _results.Empty ? rest.length ? run(rest, result instanceof _results.Match ? merge(state, result) : state) : new _results.Match(result instanceof _results.Match ? merge(state, result) : state, env, meta) : result;
      }(schemas, {}) : new _results.Empty(env, meta);
    };
  }

  return new _schemas.FunctionSchema(fn, (0, _utils.getParams)(ownParams), meta);
}
//# sourceMappingURL=composite.js.map